// Generated by CoffeeScript 1.6.3
var _;

_ = require('understory');

module.exports = function(item, field_info, key) {
  var _this = this;
  if (!(_.isObject(item) && !_.isArray(item))) {
    return item;
  }
  if (!_.isObject(field_info)) {
    return item;
  }
  field_info = _.cloneDeep(field_info);
  if (!key) {
    if (item.id) {
      key = 'id';
    } else if (item._id) {
      key = '_id';
    } else if (item.pk) {
      key = 'pk';
    }
  }
  if (key && item[key]) {
    if (field_info.dir_i === true) {
      if (!item.dirname) {
        item.dirname = _.dirname(item[key]);
        if (field_info.dirname === true) {
          delete field_info.dirname;
        }
      }
      item = _.merge(item, _.dir_i(item.dirname));
      delete field_info.dir_i;
    }
  }
  _.each(field_info, function(field, field_id) {
    var field_overlay, tr, tre;
    if (field === true) {
      if (_.isFunction(_[field_id])) {
        if (!key) {
          console.log('No primary key!');
        }
        field = {
          func: field_id,
          arg_field: key
        };
      }
    }
    if (_.isString(field)) {
      return item[field_id] = _token_replace(field, item);
    } else if (_.isNumber(field)) {
      return item[field_id] = field;
    } else if (_.isObject(field)) {
      if (field.arg_field && item[field.arg_field]) {
        field.arg = item[field.arg_field];
      } else if (field.arg) {
        if (_.isString(field.arg) && item[field.arg]) {
          field.arg = item[field.arg];
        } else if (field.arg.string) {
          if (item[field.arg.string]) {
            field.arg.string = item[field.arg.string];
          } else {
            tre = _.token_replace(field.arg.string, {});
            tr = _.token_replace(field.arg.string, item);
            if (tr && tr !== field.arg.string && tr !== tre) {
              field.arg.string = tr;
            } else {
              field.arg.string = null;
            }
          }
        }
      }
      if (_.isObject(field.arg)) {
        field.arg = _.token_replace(field.arg, item);
      }
      if (!field.app) {
        field.app = 'map';
      }
      if (!field.func) {
        field.func = field_id;
      }
      if ('map' === field.app && _.isFunction(_this[field.func])) {
        return item[field_id] = _this[field.func](field.arg);
      } else if (field.filter) {
        if (_this.filter(item, field.filter)) {
          if (field["default"]) {
            item = _.defaults(item, field["default"]);
          }
          if (field.field && key) {
            item = _this.field(item, field.field, key);
          }
          if (field.rename) {
            return item = _this.rename(item, field.rename);
          }
        }
      } else {
        delete field.app;
        delete field.map;
        delete field.func;
        field_overlay = _.token_replace(field, item);
        if (item[field_id]) {
          return item[field_id] = _.merge(item[field_id], field_overlay);
        } else {
          return item[field_id] = field_overlay;
        }
      }
    }
  });
  return item;
};
